#+TITLE: Emacs Config
#+AUTHOR: Vasiliy
#+TOC: true
#+DATE: <2019-08-15 Thu>
#+STARTUP: overview
* Setup
** Configure package sources

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
   #+END_SRC

** Bootstrap use-package

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package)
       (eval-when-compile (require 'use-package)))


     (setq use-package-always-ensure t)
   #+END_SRC

** Improve garbage collector
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 20000000)

     ;; Restore after startup
     (add-hook 'after-init-hook
               (lambda ()
                 (setq gc-cons-threshold 2000000)
                 (message "gc-cons-threshold restored to %S"
                          gc-cons-threshold)))
   #+END_SRC

** Open Emacs Config
   #+BEGIN_SRC emacs-lisp
     (defun visit-emacs-config ()
       (interactive)
       (find-file "~/.emacs.d/dotemacs.org"))

     (global-set-key (kbd "C-c e") 'visit-emacs-config)
   #+END_SRC
** Default configurations
*** Remove splash screen

    #+BEGIN_SRC emacs-lisp

      (setq inhibit-splash-screen t)

    #+END_SRC
*** Remap keys for Mac

    #+BEGIN_SRC emacs-lisp
      (setq mac-command-modifier 'meta)
      (setq mac-function-modifier 'control)
      (setq mac-option-modifier 'super)
    #+END_SRC
*** Confirmation to exit Emacs

    #+BEGIN_SRC emacs-lisp
      (setq confirm-kill-emacs 'y-or-n-p)
    #+END_SRC
*** Disable scrollbar and toolbar

    #+BEGIN_SRC emacs-lisp
      (scroll-bar-mode -1)
      (tool-bar-mode -1)
    #+END_SRC
*** Use meta key for buffers switch
    #+BEGIN_SRC emacs-lisp
      (windmove-default-keybindings 'meta)
    #+END_SRC
*** Terminal

    #+BEGIN_SRC emacs-lisp
      (setq explicit-shell-file-name "/bin/zsh")
    #+END_SRC
*** Comment line

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "M-;") 'comment-line)
    #+END_SRC
*** Load env variables
    #+BEGIN_SRC emacs-lisp
      (use-package exec-path-from-shell
        :config
        (exec-path-from-shell-initialize))
    #+END_SRC
*** Disable *Messages* Buffer

    #+BEGIN_SRC emacs-lisp
      (setq-default message-log-max nil)
    #+END_SRC
*** Disable *Completion* Buffer

    #+BEGIN_SRC emacs-lisp
      (add-hook 'minibuffer-exit-hook
                '(lambda ()
                   (let ((buffer "*Completions*"))
                     (and (get-buffer buffer)
                          (kill-buffer buffer)))))
    #+END_SRC
*** Use IBuffer

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x C-b") 'ibuffer)
      (autoload 'ibuffer "ibuffer" "List buffers." t)
    #+END_SRC
*** Disable Dialog Box

    #+BEGIN_SRC emacs-lisp
      (setq use-dialog-box nil)
    #+END_SRC
*** UTF-8 Configuration

    #+BEGIN_SRC emacs-lisp
      (set-terminal-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)
      (prefer-coding-system 'utf-8)
      (setenv "LANG" "en_US.UTF-8")
    #+END_SRC
*** Make the yes or no prompts shorter.

    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
*** Show line numbers

    #+BEGIN_SRC emacs-lisp
      (global-linum-mode t)
    #+END_SRC
*** Add /usr/local/bin to exec-path
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'exec-path "/usr/local/bin")
    #+END_SRC
*** Show column number on Mode Line

    #+BEGIN_SRC emacs-lisp
      (setq column-number-mode t)
    #+END_SRC
*** Highlight line

    #+BEGIN_SRC emacs-lisp
      (global-hl-line-mode t)
    #+END_SRC
*** Auto-refresh buffers

    #+BEGIN_SRC emacs-lisp
      (global-auto-revert-mode t)
    #+END_SRC
*** Highlight parenthesis

    #+BEGIN_SRC emacs-lisp
      (show-paren-mode 1)
      (setq show-paren-style 'parenthesis)
    #+END_SRC
*** General Indentation

    #+BEGIN_SRC emacs-lisp
      (setq-default indent-tabs-mode nil)
    #+END_SRC
*** Display time

    #+BEGIN_SRC emacs-lisp
      (setq display-time-day-and-date t
            display-time-24hr-format t)
      (display-time)
    #+END_SRC
*** Remove trailing whitespaces
    #+BEGIN_SRC emacs-lisp
      (add-hook 'before-save-hook 'delete-trailing-whitespace)
    #+END_SRC

** Copy and Paste for OSX

   #+BEGIN_SRC emacs-lisp
     (defun isolate-kill-ring()
       "Isolate Emacs kill ring from OS X system pasteboard.
     This function is only necessary in window system."
       (interactive)
       (setq interprogram-cut-function nil)
       (setq interprogram-paste-function nil))
   #+END_SRC

** Useful functions
   #+BEGIN_SRC emacs-lisp
     (defun clip-file()
       "Put there current file name on the clipboard"
       (interactive)
       (let ((filename (if (equal major-mode 'dired-mode)
                           (file-name-directory default-directory)
                         (buffer-file-name))))

         (when filename
           (simpleclip-set-contents
            (concat
             (replace-regexp-in-string ".+?/projects/.+?/" "" filename)
             ":"
             (number-to-string (1+ (count-lines 1 (point)))))))))



     (defun rspec-clip()
       "Put the rspec command on the clipboard"
       (interactive)
       (simpleclip-set-contents (concat "be rspec " (clip-file))))

     (defun duplicate-current-line-or-region (arg)
       "Duplicates the current line or region ARG times."
       (interactive "p")
       (let (beg end (origin (point)))
         (if (and mark-active (> (point) (mark)))
             (exchange-point-and-mark))
         (setq beg (line-beginning-position))
         (if mark-active
             (exchange-point-and-mark))
         (setq end (line-end-position))
         (let ((region (buffer-substring-no-properties beg end)))
           (dotimes (i arg)
             (goto-char end)
             (newline)
             (insert region)
             (setq end (point)))
           (goto-char (+ origin (* (length region) arg) arg)))))

     (defun goto-and-recenter()
       "Goto line and center it"
       (interactive)
       (call-interactively 'goto-line)
       (recenter-top-bottom))
   #+END_SRC

** Assign keybindings for custom functions
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c C-d") 'duplicate-current-line-or-region)
     (global-set-key (kbd "C-c C-c") 'clip-file)
     (global-set-key (kbd "C-c C-p") 'rspec-clip)
     (global-set-key (kbd "C-c C-g") 'goto-and-recenter)
     (global-set-key (kbd "s-<up>") 'move-text-up)
     (global-set-key (kbd "s-<down>") 'move-text-down)
     (global-set-key (kbd "C-c C-t") 'term)
   #+END_SRC

** Set font
   #+BEGIN_SRC emacs-lisp
     (set-frame-font "Monaco 12" nil t)
     (global-set-key (kbd "C-+") 'text-scale-increase)
     (global-set-key (kbd "C--") 'text-scale-decrease)
   #+END_SRC

** Full screen on start
   #+BEGIN_SRC emacs-lisp
     (custom-set-variables
      '(initial-frame-alist (quote ((fullscreen . maximized)))))
   #+END_SRC

** Custom variables
** Decode keys for iTerm
   #+BEGIN_SRC emacs-lisp
     (define-key input-decode-map "\e[1;6D" [C-S-left])
     (define-key input-decode-map "\e[1;5C" [C-S-right])
     (define-key input-decode-map "\e[1;6A" [C-S-up])
     (define-key input-decode-map "\e[1;6B" [C-S-down])

     (define-key input-decode-map "\e[1;10A" [M-S-up])
     (define-key input-decode-map "\e[1;10B" [M-S-down])
     (define-key input-decode-map "\e[1;10C" [M-S-right])
     (define-key input-decode-map "\e[1;10D" [M-S-left])

     (define-key input-decode-map "\e[1;3A" [M-up])
     (define-key input-decode-map "\e[1;3B" [M-down])
     (define-key input-decode-map "\e[1;3C" [M-right])
     (define-key input-decode-map "\e[1;3D" [M-left])
   #+END_SRC

** Use Atom theme
   #+BEGIN_SRC emacs-lisp
     (use-package atom-one-dark-theme
       :config
       (load-theme 'atom-one-dark t))
   #+END_SRC

** Start server
   #+BEGIN_SRC emacs-lisp
     (server-start)
   #+END_SRC

** Custom set faces
   #+BEGIN_SRC emacs-lisp
     (custom-set-faces
      ;; custom-set-faces was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(font-lock-string-face ((((class color) (min-colors 88) (background light)) (:foreground "Forest Green"))))
      '(font-lock-warning-face ((t (:foreground "#F6D55C" :weight bold)))))
   #+END_SRC
* Coding
** Elixir

   Alchemist

   #+BEGIN_SRC emacs-lisp
     (defun alchemist-utils-test-file-p ()
       "Return non-nil `current-buffer' holds an Elixir test file."
       (string-match "_spec\\.exs$" (or (buffer-file-name) "")))

     (use-package elixir-mode)
     (use-package alchemist
       :config
       (setq alchemist-mix-test-task "espec")
       (setq alchemist-goto-elixir-source-dir "~/.asdf/installs/elixir/1.8/"))
   #+END_SRC

** Ruby

   #+BEGIN_SRC emacs-lisp
     (setq ruby-insert-encoding-magic-comment nil)

     (eval-after-load "hideshow"
       '(add-to-list 'hs-special-modes-alist
                     `(ruby-mode
                       ,(rx (or "def" "class" "module" "{" "["))
                       ,(rx (or "}" "]" "end"))
                       ,(rx (or "#" "=begin"))
                       ruby-forward-sexp nil)))
   #+END_SRC

   Fix identation

   #+BEGIN_SRC emacs-lisp
     (setq ruby-deep-indent-paren nil)
   #+END_SRC

** JS

   Fix identation

   #+BEGIN_SRC emacs-lisp
     (setq-default js-indent-level 2)
     (setq js-deep-indent-paren nil)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (setq js-mode-hook
           (function (lambda ()
                       (setq indent-tabs-mode nil)
                       (setq c-indent-level 2))))
   #+END_SRC

** Bundler
   #+BEGIN_SRC emacs-lisp
     (use-package bundler
       :bind (("C-c i" . bundle-install)
              ("C-c c" . bundle-console)))
   #+END_SRC
** CSV
   #+BEGIN_SRC emacs-lisp
     (use-package csv-mode
       :config
       (setq-default csv-align-padding 2))
   #+END_SRC
** Ruby-Tools
   #+BEGIN_SRC emacs-lisp
     (use-package ruby-tools
       :config
       (add-hook 'ruby-mode-hook 'ruby-tools-mode))
   #+END_SRC

** Web-Mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :mode (("\\.erb\\'" . web-mode)
              ("\\.html\\'" . web-mode))
       :config
       (setq web-mode-markup-indent-offset 2))
   #+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC

** Rspec-Mode
   #+BEGIN_SRC emacs-lisp
     (use-package rspec-mode
       :config
       (add-hook 'ruby-mode-hook 'rspec-mode)
       (setq compilation-scroll-output t)
       (setq rspec-use-spring-when-possible nil)
       (setenv "PAGER" (executable-find "cat"))
       (add-hook 'after-init-hook 'inf-ruby-switch-setup)


       (setq inf-ruby-first-prompt-pattern "\\([[0-9]+] \\)?.*([^)]+)")
       (setq inf-ruby-prompt-pattern "\\([[0-9]+] \\)?.*([^)]+)"))
   #+END_SRC

** Rbenv
   #+BEGIN_SRC emacs-lisp
     (use-package rbenv
       :config
       (global-rbenv-mode))
   #+END_SRC

** Yaml
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode)
   #+END_SRC
** Slim mode

   #+BEGIN_SRC emacs-lisp
     (use-package slim-mode
       :config
       (add-to-list 'auto-mode-alist '("\\.slime\\'" . slim-mode)))
   #+END_SRC

** Rubocop
   #+BEGIN_SRC emacs-lisp
     (use-package rubocop
       :config
       (add-hook 'ruby-mode-hook 'rubocop-mode))
   #+END_SRC

** Agressive indent
   #+BEGIN_SRC emacs-lisp
     (use-package aggressive-indent)
   #+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :init
       (setq projectile-enable-caching t)
       (setq projectile-switch-project-action 'projectile-dired)
       (setq projectile-tags-backend 'etags-select)
       (setq projectile-tags-command "ctags -Re --extra=+fq --exclude=db --exclude=doc --exclude=log --exclude=tmp --exclude=.git --exclude=public --exclude=node_modules --exclude=vendor .")
       (setq tags-add-tables nil)
       :config
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (projectile-mode +1))
   #+END_SRC

** Projectile Rails
   #+BEGIN_SRC emacs-lisp
     (use-package projectile-rails
       :config
       (projectile-rails-global-mode))
   #+END_SRC
* Useful packages
** Move-text
   #+BEGIN_SRC emacs-lisp
     (use-package move-text)
   #+END_SRC
** Which key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config
       (which-key-mode)
       (which-key-setup-side-window-right))
   #+END_SRC
** Company Mode
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :config
       (add-hook 'after-init-hook 'global-company-mode)
       (global-set-key (kbd "C-SPC") 'company-complete))
   #+END_SRC

** Ag
   #+BEGIN_SRC emacs-lisp
     (use-package ag
       :config
       (setq ag-reuse-window 't)
       (setq ag-reuse-buffers 't)
       (setq ag-highlight-search t))
   #+END_SRC

   Wgrep-Ag
   #+BEGIN_SRC emacs-lisp
     (use-package wgrep)
   #+END_SRC

** Nyan mode
   #+BEGIN_SRC emacs-lisp
     (use-package nyan-mode
       :init
       (nyan-mode))
   #+END_SRC
** Neo Tree

   #+BEGIN_SRC emacs-lisp
     (defun switch-to-previous-buffer ()
       "Switch to previously open buffer.
     Repeated invocations toggle between the two most recently open buffers."
       (interactive)
       (switch-to-buffer (other-buffer (current-buffer) 1)))

     (defun smart-projectile-action ()
       (funcall 'projectile-dired)
       (funcall 'neotree-projectile-action)
       (funcall 'switch-to-previous-buffer))

   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :init
       (setq neo-smart-open t)
       (setq projectile-switch-project-action 'smart-projectile-action)
       :config
       (global-set-key [f8] 'neotree-toggle)
       (global-set-key (kbd "C-|") 'neotree-show))
   #+END_SRC

** Ace jump

   #+BEGIN_SRC emacs-lisp
     (use-package ace-jump-mode
       :bind ("M-m" . ace-jump-mode)
       :init
       (setq ace-jump-mode-case-fold t))
   #+END_SRC

** Multiple-cursors
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :bind ("C->" . mc/mark-all-like-this))
   #+END_SRC

** Expand region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :bind ("C-@" . er/expand-region))
   #+END_SRC

** Fill column indication
   #+BEGIN_SRC emacs-lisp
     (use-package fill-column-indicator
       :config
       (setq fci-rule-column 80)
       (add-hook 'prog-mode-hook 'fci-mode))
   #+END_SRC

** Dimmer
   #+BEGIN_SRC emacs-lisp
     (use-package dimmer
       :config
       (dimmer-mode))
   #+END_SRC

** Simpleclip
   #+BEGIN_SRC emacs-lisp
     (use-package simpleclip
       :config
       (simpleclip-mode 1))
   #+END_SRC

** Docker
   #+BEGIN_SRC emacs-lisp
     (use-package docker
       :ensure t
       :bind ("C-c d" . docker))

     (use-package dockerfile-mode
       :mode "Dockerfile\\'")
   #+END_SRC

** Moody
   #+BEGIN_SRC emacs-lisp
     (use-package moody
       :config
       (setq x-underline-at-descent-line t)
       (moody-replace-mode-line-buffer-identification)
       (moody-replace-vc-mode))
   #+END_SRC

** Tramp
   #+BEGIN_SRC emacs-lisp
     (setq tramp-default-method "ssh")
   #+END_SRC

** Ivy
   #+BEGIN_SRC emacs-lisp
     (use-package counsel)
     (use-package swiper)

     (use-package ivy
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (global-set-key "\C-s" 'swiper)
       (global-set-key (kbd "C-c C-r") 'ivy-resume)
       (global-set-key (kbd "<f6>") 'ivy-resume)
       (global-set-key (kbd "M-x") 'counsel-M-x)
       (global-set-key (kbd "C-x C-f") 'counsel-find-file)
       (global-set-key (kbd "<f1> f") 'counsel-describe-function)
       (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
       (global-set-key (kbd "<f1> l") 'counsel-find-library)
       (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
       (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
   #+END_SRC

** Doom Themes
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons)

     (use-package doom-themes
       :config
       (doom-themes-neotree-config)
       (doom-themes-org-config)
       (doom-themes-visual-bell-config))
   #+END_SRC
** Org-Bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC

   Appearance
   #+BEGIN_SRC emacs-lisp
     (custom-set-faces
      '(org-level-4 ((default (:foreground "lightgreen")))))
   #+END_SRC

** Org Settings
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :bind (:map org-mode-map
                   ("<M-left>" . nil)
                   ("<M-right>" . nil)
                   ("<M-up>" . nil)
                   ("<M-down>" . nil)
                   ;; Disable MissionControl keybindings
                   ("<C-left>" . org-do-promote)
                   ("<C-right>" . org-do-demote)
                   ("<C-up>" . org-metaup)
                   ("<C-down>" . org-metadown)))

     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
     (setq org-src-window-setup 'current-window)
     (setq org-support-shift-select t)
     (add-hook 'org-mode-hook 'flyspell-mode)

     (setq org-todo-keyword-faces
           '(("PROGRESS" . "lightblue")
             (("WAITING" . "yellow"))))

     (setq org-directory "~/Dropbox/org/mode")

     (defun org-file-path (filename)
       "Return the absolute address of an org file, given its relative name."
       (concat (file-name-as-directory org-directory) filename))

     (setq org-index-file (org-file-path "Inbox.org"))
     (setq org-work-file (org-file-path "Work.org"))
     (setq org-default-notes-file (org-file-path "Notes.org"))
     (setq org-refile-targets
           '((org-index-file :maxlevel . 1)
             (org-work-file :maxlevel . 1)))
     (setq org-archive-location
           (concat (org-file-path "archive.org") "::* From %s"))

     (setq org-agenda-files (list org-index-file))
     (setq org-log-done 'time)

     (define-key global-map "\C-cl" 'org-store-link)
     (define-key global-map "\C-ca" 'org-agenda)
     (define-key global-map "\C-cc" 'org-capture)

     (defun open-index-file ()
       "Open the master org TODO list."
       (interactive)
       (find-file org-index-file)
       (flycheck-mode -1)
       (end-of-buffer))

     (defun open-work-file ()
       "Open the work org TODO list."
       (interactive)
       (find-file org-work-file)
       (flycheck-mode -1)
       (end-of-buffer))

     (global-set-key (kbd "C-c o") 'open-index-file)
     (global-set-key (kbd "C-c w") 'open-work-file)
   #+END_SRC

** Doom Modeline
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :ensure t
       :init (doom-modeline-mode 1)
       :config
       (setq doom-modeline-major-mode-color-icon 't)
       (setq doom-modeline-minor-modes nil))
   #+END_SRC

** Highlight todo words
   #+BEGIN_SRC emacs-lisp
     (defun my/highlight-todo-like-words ()
       (font-lock-add-keywords
        nil `(("\\<\\(FIXME\\|TODO\\)"
               1 font-lock-warning-face t))))

     (add-hook 'prog-mode-hook 'my/highlight-todo-like-words)
   #+END_SRC

** Backups
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `(("." . "~/.saves")))

     (setq backup-directory-alist
           `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
           `((".*" ,temporary-file-directory t)))
   #+END_SRC

** IDO and FLX-IDO
   #+BEGIN_SRC emacs-lisp
     (use-package flx-ido
       :config
       (flx-ido-mode))

     (use-package ido-vertical-mode
       :config
       (ido-mode 1)
       (ido-vertical-mode 1)
       (ido-everywhere 1)
       (flx-ido-mode 1)
       (setq ido-enable-flex-matching t)
       (setq ido-use-faces nil))
   #+END_SRC

** Auto-save mode
   Save buffer every time it is changed

   #+BEGIN_SRC emacs-lisp
     (use-package focus-autosave-mode
       :config
       (focus-autosave-mode 1))

     (defadvice switch-to-buffer (before save-buffer-now activate)
       (when buffer-file-name (save-buffer)))
     (defadvice other-window (before other-window-now activate)
       (when buffer-file-name (save-buffer)))
     (defadvice windmove-up (before other-window-now activate)
       (when buffer-file-name (save-buffer)))
     (defadvice windmove-down (before other-window-now activate)
       (when buffer-file-name (save-buffer)))
     (defadvice windmove-left (before other-window-now activate)
       (when buffer-file-name (save-buffer)))
     (defadvice windmove-right (before other-window-now activate)
       (when buffer-file-name (save-buffer)))
   #+END_SRC

** Magit configuration

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind (("s-m" . nil)
              ("C-c g" . magit-status)
              ("C-c f" . magit-log-buffer-file)
              ("C-c b" . magit-blame)))
   #+END_SRC
** Zoom window
   #+BEGIN_SRC emacs-lisp
     (use-package zoom-window
       :bind ("C-x C-z" . zoom-window-zoom))
   #+END_SRC
